from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import executor
from utils import send_email, create_pdf_loading, create_pdf_client, create_pdf_uploading, write_data_to_excel_uploading, write_data_to_excel_loading, write_data_to_excel_client, insert_db_client, insert_db_loading, insert_db_uploading
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import dbase as fc
import sqlite3
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData
from word import create_word
from word2 import create_pass_word


# –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —É @BotFather
bot = Bot(token='6243897431:AAFgVVNcRxkSaj-PNVXwSV0b32TwRqpElMQ')

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–µ–º—É –ø–∞–º—è—Ç–∏
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=['start'])
async def start_cmd_handler(message: types.Message):
    if message.from_user.id == 396595993 or message.from_user.id == 2090061565 or message.from_user.id == 6096101009:
        try:
            fc.add_user(message.from_user.id, message.from_user.username)
            with open('welcome.jpg', 'rb') as photo_file:
                photo = types.InputFile(photo_file)
                await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption='üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n –Ø –±–æ—Ç –ö–æ–º–ø–∞–Ω–∏–∏ "–Æ–Ω–∏—Ñ–æ–ª" –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤.ü§ñ \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help\n–ù–∞—à –∞–¥—Ä–µ—Å—Å: –≥. –§—Ä—è–∑–∏–Ω–æ, –û–∫—Ä—É–∂–Ω–æ–π –ø—Ä., –¥. 5\n–ö —É—Å–ø–µ—Ö—É –≤–º–µ—Å—Ç–µ!‚úÖ')
            await bot.send_message(chat_id=message.from_user.id, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∫–∞–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã\n/get_all_loading - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–≥—Ä—É–∑–∫—É\n/get_all_uploading - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É\n/broadcast - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n/send_file - –∑–∞–≥—Ä—É–∑–∏—Ç—å excel –æ—Ç—á–µ—Ç')
        except Exception as e:
            print(e)
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')
    else:
        try:
            fc.add_user(message.from_user.id, message.from_user.username)
            with open('welcome.jpg', 'rb') as photo_file:
                photo = types.InputFile(photo_file)
                await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption='üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n –Ø –±–æ—Ç –ö–æ–º–ø–∞–Ω–∏–∏ "–Æ–Ω–∏—Ñ–æ–ª" –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤.ü§ñ \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help\n–ù–∞—à –∞–¥—Ä–µ—Å—Å: –≥. –§—Ä—è–∑–∏–Ω–æ, –û–∫—Ä—É–∂–Ω–æ–π –ø—Ä., –¥. 5\n–ö —É—Å–ø–µ—Ö—É –≤–º–µ—Å—Ç–µ!‚úÖ')
        except:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(commands=['help'])
async def help_cmd_handler(message: types.Message):
    await message.answer("–ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ü™™ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –º–∞—à–∏–Ω –≤—ã–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–≥—Ä—É–∑–∫–∏\n–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ–∫–æ–≤—ã–º –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –ø—É–Ω–∫—Ç!üëá")


class PassForm(StatesGroup):
    company = State()
    fio = State()
    doc = State()

class LoadingForm(StatesGroup):
    fio = State()
    company = State()
    doc = State()
    car_num = State()
    tel = State()
    fio_man = State()
    transit = State()
    attorney = State()

class UploadingForm(StatesGroup):
    company = State()
    fio = State()
    doc = State()
    car_num = State()
    fio_man = State()
    transit = State()
    attorney = State()

class MyForm(StatesGroup):
    text = State()


@dp.message_handler(commands=['cancel'], state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        return

    async with state.proxy() as data:
        
        # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
        data.clear()
    
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
    await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞')

    # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM
    await state.finish()


@dp.message_handler(commands=['pass_client'])
async def pass_cmd_handler(message: types.Message, state: FSMContext):
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
        async with state.proxy() as data:
            data.clear()
        
        # –ó–∞–ø—Ä–æ—Å –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("üôã‚Äç‚ôÇÔ∏è–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ /cancel\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        await PassForm.company.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=PassForm.company)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['company'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await PassForm.fio.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=PassForm.fio)
async def process_birth_date(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['fio'] = message.text
    
    
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–µ–≥–æ –ª–∏—á–Ω–æ—Å—Ç—å")
        await PassForm.doc.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')


@dp.message_handler(state=PassForm.doc)
async def process_visit_date(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['doc'] = message.text

        
        # –°–æ–∑–¥–∞–Ω–∏–µ pdf –¥–æ–∫—É–º–µ–Ω—Ç–∞
        pdf_data = create_pdf_client(data['company'], data['fio'], data['doc'])
        # –û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer("‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ...")
        insert_db_client(data['company'], data['fio'], data['doc'])
        send_email(pdf_data, theme="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
        write_data_to_excel_client(data['company'], data['fio'], data['doc'])
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏.")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
        async with state.proxy() as data:
            data.clear()

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM
        await state.finish()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

#–∫–æ–¥ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ//////////////////////////////////////////////////////
@dp.message_handler(commands=['pass_load'])
async def pass_cmd_handler(message: types.Message, state: FSMContext):
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
        async with state.proxy() as data:
            data.clear()
        
        # –ó–∞–ø—Ä–æ—Å –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("üöõ(–ü–û–ì–†–£–ó–ö–ê) –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è –º–∞—à–∏–Ω –ø–æ–≥—Ä—É–∑–∫–∏\n–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ /cancel\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await LoadingForm.fio.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')


@dp.message_handler(state=LoadingForm.fio)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['fio'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≥—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        await LoadingForm.company.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=LoadingForm.company)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['company'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–µ–≥–æ –ª–∏—á–Ω–æ—Å—Ç—å:")
        await LoadingForm.doc.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=LoadingForm.doc)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['doc'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:")
        await LoadingForm.car_num.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=LoadingForm.car_num)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['car_num'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await LoadingForm.tel.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=LoadingForm.tel)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['tel'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
        await LoadingForm.fio_man.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')


@dp.message_handler(state=LoadingForm.fio_man)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['fio_man'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–ú–∞—à–∏–Ω–∞ —Ç—Ä–∞–∑–Ω–∏—Ç–Ω–∞—è –∏–ª–∏ –ø—É—Å—Ç–∞—è?")
        await LoadingForm.transit.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')


@dp.message_handler(state=LoadingForm.transit)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['transit'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å—Ç—å –∏–ª–∏ –Ω–µ—Ç?")
        await LoadingForm.attorney.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=LoadingForm.attorney)
async def process_visit_date(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['attorney'] = message.text

        
        # –°–æ–∑–¥–∞–Ω–∏–µ pdf –¥–æ–∫—É–º–µ–Ω—Ç–∞
        pdf_data = create_pdf_loading(data['fio'], data['company'], data['doc'], data['car_num'], data['tel'], data['fio_man'], data['transit'], data['attorney'])
        # –û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer("‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ...")
        create_pass_word(data['fio'], data['company'],  data['doc'], data['car_num'])
        insert_db_loading(data['fio'], data['company'], data['doc'], data['car_num'], data['tel'], data['fio_man'], data['transit'], data['attorney'])
        send_email(pdf_data, theme="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è –º–∞—à–∏–Ω—ã –ø–æ–≥—Ä—É–∑–∫–∏")
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        write_data_to_excel_loading(data['fio'], data['company'], data['doc'], data['car_num'], data['tel'], data['fio_man'], data['transit'], data['attorney'])
        await message.answer("‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏.")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
        async with state.proxy() as data:
            data.clear()

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM
        await state.finish()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')


#–∫–æ–¥ –ø–æ –≤—ã–≥—Ä—É–∑–∫–µ//////////////////////////////////////////////////////
@dp.message_handler(commands=['pass_upload'])
async def pass_cmd_handler(message: types.Message, state: FSMContext):
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
        async with state.proxy() as data:
            data.clear()
        
        # –ó–∞–ø—Ä–æ—Å –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("üöö(–í–´–ì–†–£–ó–ö–ê) –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è –º–∞—à–∏–Ω –≤—ã–≥—Ä—É–∑–∫–∏\n–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ /cancel\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")
        await UploadingForm.company.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=UploadingForm.company)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['company'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
        await UploadingForm.fio.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=UploadingForm.fio)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['fio'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–µ–≥–æ –ª–∏—á–Ω–æ—Å—Ç—å:")
        await UploadingForm.doc.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=UploadingForm.doc)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['doc'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:")
        await UploadingForm.car_num.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=UploadingForm.car_num)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['car_num'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:")
        await UploadingForm.fio_man.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=UploadingForm.fio_man)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['fio_man'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–¢—Ä–∞–∑–Ω–∏—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è –º–∞—à–∏–Ω–∞?")
        await UploadingForm.transit.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')

@dp.message_handler(state=UploadingForm.transit)
async def process_fio(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['transit'] = message.text
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–ï—Å—Ç—å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—Ç?")
        await UploadingForm.attorney.set()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')


@dp.message_handler(state=UploadingForm.attorney)
async def process_visit_date(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with state.proxy() as data:
            data['attorney'] = message.text

        
        # –°–æ–∑–¥–∞–Ω–∏–µ pdf –¥–æ–∫—É–º–µ–Ω—Ç–∞
        pdf_data = create_pdf_uploading(data['company'], data['fio'], data['doc'], data['car_num'], data['fio_man'], data['transit'], data['attorney'])
        # –û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer("‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ...")
        create_pass_word(data['fio'], data['company'],  data['doc'], data['car_num'])
        insert_db_uploading(data['company'], data['doc'], data['car_num'], data['fio'], data['fio_man'], data['transit'], data['attorney'])
        send_email(pdf_data, theme="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è –º–∞—à–∏–Ω—ã –≤—ã–≥—Ä—É–∑–∫–∏")
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        write_data_to_excel_uploading(data['company'], data['fio'], data['doc'], data['car_num'], data['fio_man'], data['transit'], data['attorney'])
        await message.answer("‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏.")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
        async with state.proxy() as data:
            data.clear()

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM
        await state.finish()
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999')


@dp.message_handler(commands=['broadcast'])
async def handle_broadcast(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == 396595993 or message.from_user.id == 2090061565 or message.from_user.id == 6096101009:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        await MyForm.text.set()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(state=MyForm.text)
async def send_broadcast(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    text = message.text
    users = fc.all_user()
    c=0
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Å–ø–∏—Å–∫–∞
    for user_id in users:
        try:
            await bot.send_message(user_id[0], text)
            c = c + 1
        except:
            pass
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


#–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å///////////////////////////////////////////////////////////////////////
# —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ CallbackData –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ "–æ–¥–æ–±—Ä–∏—Ç—å" –∏ "–æ—Ç–∫–∞–∑–∞—Ç—å"
approve_decline_callback = CallbackData("approve_decline", "id", "action", "t")

@dp.message_handler(commands=['get_all_loading'])
async def get_all_client_handler(message: types.Message):
    if message.from_user.id == 396595993 or message.from_user.id == 2090061565 or message.from_user.id == 6096101009:
        conn = sqlite3.connect('database_uf.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0
        cursor.execute("SELECT * FROM loading WHERE status = 0")
        rows = cursor.fetchall()

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        if not rows:
            await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–æ–∂–∏–¥–∞–Ω–∏–µ'!")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–æ–¥–æ–±—Ä–∏—Ç—å" –∏ "–æ—Ç–∫–∞–∑–∞—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        
        for row in rows:
            markup = InlineKeyboardMarkup()
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            approve_button = InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=approve_decline_callback.new(id=row[9], action="approve", t="l"))
            decline_button = InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=approve_decline_callback.new(id=row[9], action="decline", t="l"))
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup.row(approve_button, decline_button)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞—è–≤–∫–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç {row[0]}\n–ö–æ–º–ø–∞–Ω–∏—è: {row[1]}\n–§–ò–û: {row[0]}\n–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {row[2]}\n–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {row[3]}\n–§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {row[5]}\n–¢—Ä–∞–Ω–∑–∏—Ç: {row[6]}\n–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row[7]}", reply_markup=markup)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message_handler(commands=["send_file"])
async def send_file_command_handler(message: types.Message):
    if message.from_user.id == 396595993 or message.from_user.id == 2090061565 or message.from_user.id == 6096101009:
        # –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
        with open('work_pass_data.xlsx', "rb") as file:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_document(message.chat.id, file)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.callback_query_handler(approve_decline_callback.filter())
async def process_approve_decline_callback(callback_query: types.CallbackQuery, callback_data: dict):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º id –∑–∞—è–≤–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    pass_id = callback_data['id']
    action = callback_data['action']
    type = callback_data['t']
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database_uf.db')
    cursor = conn.cursor()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤–∏–µ–º
    if type == 'l':
        row = cursor.execute(f"SELECT * FROM loading WHERE id = '{pass_id}'").fetchone()
        if action == "approve":
            try:
                cursor.execute(f"UPDATE loading SET status=1 WHERE id='{pass_id}'")
                status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞"
                create_pass_word(row[0], row[1], row[2], row[3])
                await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
                with open('pass.docx', 'rb') as file:
                    await bot.send_document(callback_query.from_user.id, file, caption=f'–ü—Ä–æ–ø—É—Å–∫ –¥–ª—è {row[0]} –≥–æ—Ç–æ–≤')

            except:
                pass
        elif action == "decline":
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
            await bot.send_message(chat_id=callback_query.from_user.id, text=f'–ó–∞—è–≤–∫–∞ –æ—Ç {row[0]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
            cursor.execute(f"UPDATE loading SET status=2 WHERE id='{pass_id}'")
            status_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    elif type == 'u':
        print(pass_id)
        row = cursor.execute(f"SELECT * FROM uploading WHERE id = '{pass_id}'").fetchone()
        print(row)
        if action == "approve":
            try:
                cursor.execute(f"UPDATE uploading SET status=1 WHERE id='{pass_id}'")
                status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞"
                create_pass_word(row[2], row[0], row[3], row[1])
                await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
                with open('pass.docx', 'rb') as file:
                    await bot.send_document(callback_query.from_user.id, file, caption=f'–ü—Ä–æ–ø—É—Å–∫ –¥–ª—è {row[2]} –≥–æ—Ç–æ–≤')

            except Exception as e:
                print(e)
        elif action == "decline":
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
            print(row)
            await bot.send_message(chat_id=callback_query.from_user.id, text=f'–ó–∞—è–≤–∫–∞ –æ—Ç {row[2]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
            cursor.execute(f"UPDATE uploading SET status=2 WHERE id='{pass_id}'")
            status_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn.commit()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
    await callback_query.answer(f"–ó–∞—è–≤–∫–∞ ‚Ññ{pass_id} {status_text}")


async def update_message_with_pass_info(message: types.Message, pass_id: int):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database_uf.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(f"SELECT * FROM loading WHERE id='{pass_id}'")
    row = cursor.fetchone()

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if row is None:
        await message.answer('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞—è–≤–∫–∏
    markup = InlineKeyboardMarkup()
    if row[8] == 0:
        approve_button = InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=approve_decline_callback.new(id=pass_id, action="approve"))
        decline_button = InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=approve_decline_callback.new(id=pass_id, action="decline"))
        markup.row(approve_button, decline_button)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç {row[0]}:\n–ö–æ–º–ø–∞–Ω–∏—è: {row[1]}\n–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {row[2]}\n–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {row[3]}\n–§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {row[5]}\n–¢—Ä–∞–Ω–∑–∏—Ç: {row[6]}\n–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row[7]}")



@dp.message_handler(commands=['get_all_uploading'])
async def get_all_client_handler(message: types.Message):
    if message.from_user.id == 396595993 or message.from_user.id == 2090061565 or message.from_user.id == 6096101009:
        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('database_uf.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0
        cursor.execute("SELECT * FROM uploading WHERE status = 0")
        rows = cursor.fetchall()

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        if not rows:
            await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–æ–∂–∏–¥–∞–Ω–∏–µ'!")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–æ–¥–æ–±—Ä–∏—Ç—å" –∏ "–æ—Ç–∫–∞–∑–∞—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        markup = InlineKeyboardMarkup()
        for row in rows:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            markup = InlineKeyboardMarkup()
            approve_button = InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=approve_decline_callback.new(id=row[8], action="approve", t="u"))
            decline_button = InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=approve_decline_callback.new(id=row[8], action="decline", t="u"))
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup.row(approve_button, decline_button)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞—è–≤–∫–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç {row[2]}\n–ö–æ–º–ø–∞–Ω–∏—è: {row[0]}\n–§–ò–û: {row[2]}\n–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {row[3]}\n–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {row[1]}\n–§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {row[4]}\n–¢—Ä–∞–Ω–∑–∏—Ç: {row[5]}\n–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row[6]}", reply_markup=markup)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# @dp.callback_query_handler(approve_decline_callback_uploading.filter())
# async def process_approve_decline_callback(callback_query: types.CallbackQuery, callback_data: dict):
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º id –∑–∞—è–≤–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
#     print(1)
#     print(callback_query)
#     pass_id = callback_data['id']
#     print(pass_id)
#     action = callback_data['action']
#     print(action)
#     # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#     conn = sqlite3.connect('database_uf.db')
#     cursor = conn.cursor()
#     row = cursor.execute(f"SELECT * FROM uploading WHERE id = '{pass_id}'").fetchone()
#     print(row)
#     # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤–∏–µ–º
#     if action == "approve":
#         try:
#             cursor.execute(f"UPDATE uploading SET status=1 WHERE id='{pass_id}'")
#             status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞"
#             create_pass_word(row[0], row[1], row[2], row[3])
#             await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
#             with open('pass.docx', 'rb') as file:
#                 await bot.send_document(callback_query.from_user.id, file, caption=f'–ü—Ä–æ–ø—É—Å–∫ –¥–ª—è {row[0]} –≥–æ—Ç–æ–≤')

#         except Exception as e:
#             print(e)
#     elif action == "decline":
#         await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
#         print(row)
#         await bot.send_message(chat_id=callback_query.from_user.id, text=f'–ó–∞—è–≤–∫–∞ –æ—Ç {row[0]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
#         cursor.execute(f"UPDATE loading SET status=2 WHERE id='{pass_id}'")
#         status_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     conn.commit()

#     # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#     cursor.close()
#     conn.close()

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
#     await callback_query.answer(f"–ó–∞—è–≤–∫–∞ ‚Ññ{pass_id} {status_text}")

async def update_message_with_pass_info(message: types.Message, pass_id: int):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database_uf.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(f"SELECT * FROM uploading WHERE id='{pass_id}'")
    row = cursor.fetchone()

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if row is None:
        await message.answer('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞—è–≤–∫–∏
    markup = InlineKeyboardMarkup()
    if row[8] == 0:
        approve_button = InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=approve_decline_callback.new(id=pass_id, action="approve"))
        decline_button = InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=approve_decline_callback.new(id=pass_id, action="decline"))
        markup.row(approve_button, decline_button)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç {row[0]}:\n–ö–æ–º–ø–∞–Ω–∏—è: {row[1]}\n–§–ò–û: {row[2]}\n–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {row[3]}\n–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {row[4]}\n–§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {row[5]}\n–¢—Ä–∞–Ω–∑–∏—Ç: {row[6]}\n–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row[7]}")




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
